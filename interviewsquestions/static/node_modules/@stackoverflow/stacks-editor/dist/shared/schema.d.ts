import OrderedMap from "orderedmap";
import { DOMParser, MarkSpec, Node as ProseMirrorNode, NodeSpec, ParseOptions, ParseRule, Schema } from "prosemirror-model";
export declare const richTextSchema: Schema<keyof OrderedMap<NodeSpec>, keyof OrderedMap<MarkSpec>>;
export declare const tableNodes: import("prosemirror-model").NodeType<Schema<keyof OrderedMap<NodeSpec>, keyof OrderedMap<MarkSpec>>>[];
export declare const commonmarkSchema: Schema<"code_block" | "text" | "doc", never>;
/** Parses out a Prosemirror document from a code (markdown) string */
export declare class CodeStringParser extends DOMParser {
    static schemaRules: (schema: Schema) => ParseRule[];
    parseCode(content: string, options?: ParseOptions): ProseMirrorNode;
    static fromSchema(schema: Schema): CodeStringParser;
    static toString(node: ProseMirrorNode): string;
}
