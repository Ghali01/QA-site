import { EditorState, Plugin, Transaction } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
/**
 * Callback function signature for all menu entries
 * @param view The editor view to act on
 * @param suppressDispatch True if the command should *not* be ran on the state; used to determine if the command is valid
 * @returns true if the entry is valid for the current state
 */
export declare type MenuCommand = (state: EditorState, dispatch: (tr: Transaction) => void, view?: EditorView) => boolean;
/**
 * Describes a menu entry where command is the command to run when invoked and dom is the visual button itself
 */
export interface MenuCommandEntry {
    active?: (state: EditorState) => boolean;
    visible?: (state: EditorState) => boolean;
    command: MenuCommand;
    dom: HTMLElement;
    key: string;
    children?: MenuCommandEntry[];
}
/**
 * Simple wrapper function to ensure that conditional menu item adds are consistent
 * @param item The item to add if flag is truty
 * @param flag Whether to add the item
 */
export declare function addIf(item: MenuCommandEntry, flag: boolean): MenuCommandEntry;
/**
 * Creates a menu plugin with the passed in entries
 * @param items The entries to use on the generated menu
 */
export declare function createMenuPlugin(items: MenuCommandEntry[], containerFn: (view: EditorView) => Node): Plugin;
/**
 * Helper function to create consistent menu entry doms
 * @param iconName The html of the svg to use as the icon
 * @param title The text to place in the button's title attribute
 * @param key A unique identifier used for identifying the command to be executed on click
 * @param cssClasses extra CSS classes to be applied to this menu icon (optional)
 */
export declare function makeMenuIcon(iconName: string, title: string, key: string, cssClasses?: string[]): HTMLButtonElement;
/**
 * Helper function to create a MenuCommandEntry for a menu spacer
 */
export declare function makeMenuSpacerEntry(visible?: (state: EditorState) => boolean, cssClasses?: string[]): MenuCommandEntry;
/**
 * Create a dropdown menu item that contains all children in its popover
 * @param svg The html of the svg to use as the dropdown icon
 * @param title The text to place in the dropdown button's title attribute
 * @param key A unique identifier used for this dropdown menu
 * @param visible A function that determines wether the dropdown should be visible or hidden
 * @param children The child MenuComandEntry items to be placed in the dropdown menu
 */
export declare function makeMenuDropdown(svg: string, title: string, key: string, visible?: (state: EditorState) => boolean, ...children: MenuCommandEntry[]): MenuCommandEntry;
/**
 * Creates a dropdown menu item that can be embedded in a dropdown menu's popover
 * @param title The text to be displayed for this item
 * @param command The command to be executed when this item is clicked
 * @param key A unique identifier used for identifying the command to be executed on click
 */
export declare function dropdownItem(title: string, command: MenuCommand, key: string): MenuCommandEntry;
/**
 * Creates a section with a heading usable for dropdown menus. This is just a visual element with no
 * interaction and no action being triggered on click
 * @param title The text to be displayed for this item
 * @param key A unique identifier used for identifying the command to be executed on click
 */
export declare function dropdownSection(title: string, key: string): MenuCommandEntry;
/**
 * Creates a link entry that opens a _blank to href when clicked
 * @param iconName The html of the svg to use as the icon
 * @param title The text to place in the link's title attribute
 * @param href The href to open when clicked
 */
export declare function makeMenuLinkEntry(iconName: string, title: string, href: string): MenuCommandEntry;
