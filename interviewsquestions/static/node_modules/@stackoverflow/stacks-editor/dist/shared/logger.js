// eslint disables needed to ensure we don't spam the console in production/test environments
/* eslint-disable no-console, no-process-env */
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
// env variables set by webpack (or jest) based on the build mode
var isDevelopment = process.env.NODE_ENV === "development";
var isTest = process.env.NODE_ENV === "test";
/**
 * Styles text to be used as a "header" in the console
 * @param text The text to stype
 */
function styleHeaderText(text, preface) {
    if (preface === void 0) { preface = ""; }
    if (!text) {
        return [];
    }
    return ["%c" + preface + text, "font-weight: bold;"];
}
/**
 * Logs a message to the console with a styled "header" (development only)
 * @param header The header of the log which will be styled to stand out
 * @param message Any items to log in the message
 */
export function log(header) {
    var message = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        message[_i - 1] = arguments[_i];
    }
    if (!isDevelopment) {
        return;
    }
    console.log.apply(console, __spreadArray(__spreadArray([], styleHeaderText(header, "[DEBUG] ")), message));
}
/**
 * Logs an error to the console with a styled "header" (both development and prod)
 * @param header The header of the log which will be styled to stand out
 * @param error Any items to log in the error
 */
export function error(header) {
    var error = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        error[_i - 1] = arguments[_i];
    }
    // don't spam up our test output
    if (isTest) {
        return;
    }
    console.error.apply(console, __spreadArray(__spreadArray([], styleHeaderText(header)), error));
}
