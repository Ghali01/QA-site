import { Plugin } from "prosemirror-state";
import { validateLink } from "../../shared/utils";
function isInlineCode(state) {
    var _a = state.selection, from = _a.from, $from = _a.$from, to = _a.to, empty = _a.empty;
    var schema = state.schema;
    if (!empty) {
        return state.doc.rangeHasMark(from, to, schema.marks.code);
    }
    return !!schema.marks.code.isInSet(state.storedMarks || $from.marks());
}
/** Plugin that detects if a URL is being pasted in and automatically formats it as a link */
export var linkPasteHandler = new Plugin({
    props: {
        handlePaste: function (view, event) {
            var selectedNode = view.state.selection.$from.node();
            if (selectedNode.type.name === "code_block") {
                // We don't need to do anything special to handle pasting into code blocks
                // except to avoid overriding that default behavior.
                return false;
            }
            var link = event.clipboardData.getData("text/plain");
            if (!link || !validateLink(link)) {
                return false;
            }
            if (isInlineCode(view.state)) {
                // TODO: Would be nice to support smarter pasting into inline code in general.
                // This supports the bare minimum (not breaking the inline block if we're pasting a link in)
                // But any other pasting into inline code ends up breaking its styling.
                view.dispatch(view.state.tr.insertText(link));
            }
            else {
                var linkText = link;
                if (!view.state.tr.selection.empty) {
                    var selection_1 = view.state.tr.selection;
                    var selectedText_1 = "";
                    view.state.doc.nodesBetween(selection_1.from, selection_1.to, function (node, position) {
                        if (!node.isText) {
                            return;
                        }
                        var start = Math.max(0, selection_1.from - position);
                        var end = Math.max(0, selection_1.to - position);
                        selectedText_1 += node.textBetween(start, end);
                    });
                    if (selectedText_1) {
                        linkText = selectedText_1;
                    }
                }
                var schema = view.state.schema;
                var linkAttrs = { href: link, markup: linkText === link ? "linkify" : null };
                var node = schema.text(linkText, [
                    schema.marks.link.create(linkAttrs),
                ]);
                view.dispatch(view.state.tr.replaceSelectionWith(node, false));
            }
            return true;
        },
    },
});
