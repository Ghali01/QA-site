var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { baseKeymap } from "prosemirror-commands";
import { history } from "prosemirror-history";
import { keymap } from "prosemirror-keymap";
import { EditorState } from "prosemirror-state";
import { Transform } from "prosemirror-transform";
import { EditorView } from "prosemirror-view";
import { collapseExternalPlugins, combineSchemas, } from "../shared/external-editor-plugin";
import { CodeBlockHighlightPlugin } from "../shared/highlighting/highlight-plugin";
import { error, log } from "../shared/logger";
import { buildMarkdownParser } from "../shared/markdown-parser";
import { defaultImageUploadHandler, richTextImageUpload, } from "../shared/prosemirror-plugins/image-upload";
import { editableCheck, readonlyPlugin, } from "../shared/prosemirror-plugins/readonly";
import { CodeStringParser, richTextSchema } from "../shared/schema";
import { deepMerge } from "../shared/utils";
import { BaseView, defaultParserFeatures, } from "../shared/view";
import { createMenu } from "./commands";
import { richTextInputRules } from "./inputrules";
import { richTextKeymap, tableKeymap } from "./key-bindings";
import { stackOverflowMarkdownSerializer } from "./markdown-serializer";
import { CodeBlockView } from "./node-views/code-block";
import { HtmlBlock, HtmlBlockContainer } from "./node-views/html-block";
import { ImageView } from "./node-views/image";
import { TagLink } from "./node-views/tag-link";
import { codePasteHandler } from "./plugins/code-paste-handler";
import { linkPasteHandler } from "./plugins/link-paste-handler";
import { linkPreviewPlugin } from "./plugins/link-preview";
import { linkTooltipPlugin } from "./plugins/link-tooltip";
import { spoilerToggle } from "./plugins/spoiler-toggle";
import { tables } from "./plugins/tables";
/*
 * Implements an WYSIWYG-style editor. Content will be rendered immediately by prosemirror but the in- and output will still be markdown
 */
var RichTextEditor = /** @class */ (function (_super) {
    __extends(RichTextEditor, _super);
    function RichTextEditor(target, content, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.options = deepMerge(RichTextEditor.defaultOptions, options);
        _this.externalPlugins = collapseExternalPlugins(_this.options.externalPlugins);
        _this.markdownSerializer = stackOverflowMarkdownSerializer(_this.externalPlugins);
        var doc = _this.parseContent(content);
        var tagLinkOptions = _this.options.parserFeatures.tagLinks;
        _this.editorView = new EditorView(function (node) {
            var _a;
            (_a = node.classList).add.apply(_a, _this.options.classList);
            target.appendChild(node);
        }, {
            editable: editableCheck,
            state: EditorState.create({
                doc: doc,
                plugins: __spreadArray([
                    history(),
                    tableKeymap,
                    richTextKeymap,
                    keymap(baseKeymap),
                    createMenu(_this.options),
                    richTextInputRules,
                    linkPreviewPlugin(_this.options.linkPreviewProviders),
                    CodeBlockHighlightPlugin(_this.options.codeblockOverrideLanguage),
                    linkTooltipPlugin,
                    richTextImageUpload(_this.options.imageUpload, _this.options.pluginParentContainer),
                    readonlyPlugin(),
                    spoilerToggle,
                    tables,
                    codePasteHandler,
                    linkPasteHandler
                ], _this.externalPlugins.plugins),
            }),
            nodeViews: __assign({ code_block: function (node) {
                    return new CodeBlockView(node);
                }, image: function (node, view, getPos) {
                    return new ImageView(node, view, getPos);
                }, tagLink: function (node) {
                    return new TagLink(node, tagLinkOptions);
                }, html_block: function (node) {
                    return new HtmlBlock(node);
                }, html_block_container: function (node) {
                    return new HtmlBlockContainer(node);
                } }, _this.externalPlugins.nodeViews),
        });
        log("prosemirror rich-text document", _this.editorView.state.doc.toJSON().content);
        return _this;
    }
    Object.defineProperty(RichTextEditor, "defaultOptions", {
        get: function () {
            return {
                parserFeatures: defaultParserFeatures,
                editorHelpLink: null,
                linkPreviewProviders: [],
                codeblockOverrideLanguage: null,
                menuParentContainer: null,
                imageUpload: {
                    handler: defaultImageUploadHandler,
                },
                externalPlugins: [],
            };
        },
        enumerable: false,
        configurable: true
    });
    RichTextEditor.prototype.parseContent = function (content) {
        var _a;
        var alteredSchema = combineSchemas(richTextSchema, (_a = this.externalPlugins) === null || _a === void 0 ? void 0 : _a.schema);
        var markdownParser = buildMarkdownParser(this.options.parserFeatures, alteredSchema, this.externalPlugins);
        var doc;
        try {
            doc = markdownParser.parse(content);
        }
        catch (e) {
            // there was a catastrophic error! Try not to lose the user's doc...
            error("RichTextEditorConstructor markdownParser.parse", "Catastrophic parse error!", e);
            doc = CodeStringParser.fromSchema(alteredSchema).parseCode(content);
            // manually add an h1 warning to the newly parsed doc
            var tr = new Transform(doc).insert(0, alteredSchema.node("heading", { level: 1 }, alteredSchema.text("WARNING! There was an error parsing the document")));
            doc = tr.doc;
        }
        return doc;
    };
    RichTextEditor.prototype.serializeContent = function () {
        return this.markdownSerializer.serialize(this.editorView.state.doc);
    };
    return RichTextEditor;
}(BaseView));
export { RichTextEditor };
