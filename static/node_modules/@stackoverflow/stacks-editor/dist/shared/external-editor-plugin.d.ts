import type MarkdownIt from "markdown-it";
import type { TokenConfig } from "prosemirror-markdown";
import type { MarkSpec, NodeSpec, Schema } from "prosemirror-model";
import type { Plugin } from "prosemirror-state";
import type { EditorProps } from "prosemirror-view";
import type { MarkdownSerializerNodes } from "../rich-text/markdown-serializer";
import type { MenuCommandEntry } from "./menu";
export interface ExternalEditorPlugin {
    menuEntries: MenuCommandEntry[];
    nodeViews: EditorProps["nodeViews"];
    markdownParser: {
        tokens: {
            [key: string]: TokenConfig;
        };
        plugins: MarkdownIt.PluginSimple[];
    };
    markdownSerializers: MarkdownSerializerNodes;
    plugins: Plugin[];
    schema: {
        nodes?: {
            [name: string]: NodeSpec;
        };
        marks?: {
            [name: string]: MarkSpec;
        };
    };
}
/**
 * Collapses a collection of ExternalEditorPlugin down into a single plugin
 * @param plugins The plugins to collapse
 */
export declare function collapseExternalPlugins(plugins: ExternalEditorPlugin[]): ExternalEditorPlugin;
/**
 * Alters an existing schema by combining it with a new schema;
 * avoids creating a new schema altogether so other plugins referencing the base schema don't fail
 * @param schema The base schema to alter / add to
 * @param pluginSchema The schema from an ExternalEditorPlugin to add into the base schema
 */
export declare function combineSchemas(schema: Schema, pluginSchema: ExternalEditorPlugin["schema"]): Schema;
