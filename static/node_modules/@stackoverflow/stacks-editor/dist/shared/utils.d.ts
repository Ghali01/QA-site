import { EditorState } from "prosemirror-state";
/**
 * Recursively deep merges two objects into a new object, leaving the original two untouched
 * NOTE: Arrays are only shallow merged
 * @param object1 The object to base the merge off of
 * @param object2 The object to merge into the base object
 */
export declare function deepMerge(object1: unknown, object2: unknown): unknown;
/**
 * Compares two states and returns true if the doc has changed between them.
 * The doc is considered changed if:
 *      * its content changed
 *      * the selection has changed
 *      * the stored marks have changed
 * @param prevState The "old" / previous editor state
 * @param newState The "new" / current editor state
 */
export declare function docChanged(prevState: EditorState, newState: EditorState): boolean;
export declare type StickyChangeDetails = {
    target: Element;
    stuck: boolean;
};
/** The class to attach sticky observers to */
export declare const STICKY_OBSERVER_CLASS = "js-sticky";
/**
 * Starts observers watching all .STICKY_OBSERVER_CLASS elements for a change in stuck position
 * @param container The container to search for STICKY_OBSERVER_CLASS elements (usually the closest scrolling parent)
 * @fires sticky-change
 */
export declare function startStickyObservers(container: Element): void;
/**
 * Checks if a url is well-formed as passes validation checks
 * @param url The url to validate
 */
export declare function validateLink(url: string): boolean;
/**
 * Template function to escape all html in substitions, but not the rest of the template.
 * For instance, escapeHTML`<p>${"<span>user input</span>"}</p>` will escape the inner span, but not the outer p tags.
 * Uses markdown-it's @see escapeHtml in the background
 */
export declare function escapeHTML(strings: TemplateStringsArray, ...subs: unknown[]): string;
