import MarkdownIt from "markdown-it/lib";
import Token from "markdown-it/lib/token";
import { MarkdownParser, TokenConfig } from "prosemirror-markdown";
import { NodeType, Schema } from "prosemirror-model";
import { ExternalEditorPlugin } from "./external-editor-plugin";
import type { CommonmarkParserFeatures } from "./view";
interface MarkdownParserState {
    openNode(nodeType: NodeType, attrs: Record<string, unknown>): void;
    parseTokens(tokens: Token[]): void;
    closeNode(): void;
    addText(content: string): void;
}
/**
 * Custom MardownParser that manually adds a low-level handler for `html_inline`.
 * We do this because we need some special functionality that is not exposed by default with the existing
 * handler generation code (from adding tokens)
 */
declare class SOMarkdownParser extends MarkdownParser {
    tokenizer: MarkdownIt;
    tokenHandlers: {
        [key: string]: (state: MarkdownParserState, tok: Token) => void;
    };
    schema: Schema;
    tokens: {
        [key: string]: TokenConfig;
    };
    constructor(schema: Schema, tokenizer: MarkdownIt, tokens: {
        [key: string]: TokenConfig;
    });
}
/**
 * Builds a custom markdown parser with the passed features toggled
 * @param features The features to toggle on/off
 */
export declare function buildMarkdownParser(features: CommonmarkParserFeatures, schema: Schema, externalPlugins: ExternalEditorPlugin): SOMarkdownParser;
export {};
