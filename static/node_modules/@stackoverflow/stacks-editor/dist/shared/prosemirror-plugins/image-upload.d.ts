import { Plugin, EditorState, Transaction } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
import { PluginView } from "../view";
/**
 * Async image upload callback that is passed the uploaded file and retuns a resolvable path to the image
 * @param {File} file The uploaded image file
 * @returns {string} The resolvable path to where the file was uploaded
 */
declare type ImageUploadHandlerCallback = (file: File) => Promise<string>;
/**
 * Image upload options
 */
export interface ImageUploadOptions {
    /**
     * A function handling file uploads. Will receive the file to upload
     * as the `file` parameter and needs to return a resolved promise with the URL of the uploaded file
     */
    handler?: ImageUploadHandlerCallback;
    /**
     * The html to insert into the image uploader to designate the image storage provider
     * NOTE: this is injected as-is and can potentially be a XSS hazard!
     */
    brandingHtml?: string;
    /**
     * The html to insert into the image uploader to alert users of the uploaded image content policy
     * NOTE: this is injected as-is and can potentially be a XSS hazard!
     */
    contentPolicyHtml?: string;
    /**
     * If true, wraps all images in links that point to the uploaded image url
     */
    wrapImagesInLinks?: boolean;
}
/**
 * Default image upload callback that posts to `/image/upload`,
 * expecting a json response like `{ UploadedImage: "https://www.example.com/path/to/file" }`
 * and returns `UploadedImage`'s value
 * @param file The file to upload
 */
export declare function defaultImageUploadHandler(file: File): Promise<string>;
declare enum ValidationResult {
    Ok = 0,
    FileTooLarge = 1,
    InvalidFileType = 2
}
/**
 * Callback function to generate a transaction for the ImageUploader
 * to dispatch when an image has been uploaded
 * @param state The current state of the plugin
 * @param url The url to where the image was uploaded
 * @param position The position in the document where any added entities should be inserted
 */
declare type addTransactionDispatcher = (state: EditorState, url: string, position: number) => Transaction;
export declare class ImageUploader implements PluginView {
    uploadOptions?: ImageUploadOptions;
    uploadContainer: HTMLElement;
    uploadField: HTMLInputElement;
    image: File;
    isVisible: boolean;
    pluginContainer: Element;
    private addTransactionDispatcher;
    constructor(view: EditorView, uploadOptions: ImageUploadOptions, pluginContainer: Element, addTransactionDispatcher: addTransactionDispatcher);
    highlightDropArea(event: DragEvent): void;
    unhighlightDropArea(event: DragEvent): void;
    handleFileSelection(view: EditorView): void;
    handleDrop(event: DragEvent, view: EditorView): void;
    handlePaste(event: ClipboardEvent, view: EditorView): void;
    validateImage(image: File): ValidationResult;
    showValidationError(errorMessage: string, level?: string): void;
    hideValidationError(): void;
    showImagePreview(file: File): Promise<void>;
    private showImagePreviewAsync;
    resetImagePreview(): void;
    resetUploader(): void;
    handleUploadTrigger(event: Event, file: File, view: EditorView): void;
    startImageUpload(view: EditorView, file: File): Promise<void>;
    update(view: EditorView): void;
    destroy(): void;
}
export declare function hideImageUploader(view: EditorView): void;
export declare function showImageUploader(view: EditorView, file?: File): void;
/** Checks if the image-upload functionality is enabled */
export declare function imageUploaderEnabled(view: EditorView): boolean;
/**
 * Adds image uploading capabilities to the editor.
 * With this plugin, you'll be able to show a popover that allows you to
 * browse for files on your file system, or use drag & drop to select images
 * to upload.
 *
 * On upload, this plugin will call the provided uploadOptions.handler function
 * @see defaultImageUploadHandler for an example
 *
 * @param uploadOptions The imageUpload options
 * @param containerFn A function that returns the container to insert the plugin's UI into
 */
export declare function richTextImageUpload(uploadOptions: ImageUploadOptions, containerFn: (view: EditorView) => Element): Plugin;
/**
 * Adds image uploading capabilities to the editor.
 * With this plugin, you'll be able to show a popover that allows you to
 * browse for files on your file system, or use drag & drop to select images
 * to upload.
 *
 * On upload, this plugin will call the provided uploadOptions.handler function
 * @see defaultImageUploadHandler for an example
 *
 * @param uploadHandler The imageUpload options
 * @param containerFn A function that returns the container to insert the plugin's UI into
 */
export declare function commonmarkImageUpload(uploadOptions: ImageUploadOptions, containerFn: (view: EditorView) => Element): Plugin;
export {};
