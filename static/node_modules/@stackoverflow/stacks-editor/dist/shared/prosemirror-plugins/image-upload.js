var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Plugin, TextSelection, } from "prosemirror-state";
import { Decoration, DecorationSet } from "prosemirror-view";
import { richTextSchema } from "../schema";
import { StatefulPlugin, StatefulPluginKey } from "./plugin-extensions";
import { escapeHTML } from "../utils";
/**
 * Default image upload callback that posts to `/image/upload`,
 * expecting a json response like `{ UploadedImage: "https://www.example.com/path/to/file" }`
 * and returns `UploadedImage`'s value
 * @param file The file to upload
 */
export function defaultImageUploadHandler(file) {
    return __awaiter(this, void 0, void 0, function () {
        var formData, response, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    formData = new FormData();
                    formData.append("file", file);
                    return [4 /*yield*/, fetch("/image/upload", {
                            method: "POST",
                            cache: "no-cache",
                            body: formData,
                        })];
                case 1:
                    response = _a.sent();
                    if (!response.ok) {
                        throw Error("Failed to upload image: " + response.status + " - " + response.statusText);
                    }
                    return [4 /*yield*/, response.json()];
                case 2:
                    json = (_a.sent());
                    return [2 /*return*/, json.UploadedImage];
            }
        });
    });
}
var ValidationResult;
(function (ValidationResult) {
    ValidationResult[ValidationResult["Ok"] = 0] = "Ok";
    ValidationResult[ValidationResult["FileTooLarge"] = 1] = "FileTooLarge";
    ValidationResult[ValidationResult["InvalidFileType"] = 2] = "InvalidFileType";
})(ValidationResult || (ValidationResult = {}));
var ImageUploader = /** @class */ (function () {
    function ImageUploader(view, uploadOptions, pluginContainer, addTransactionDispatcher) {
        var _this = this;
        var _a, _b;
        this.image = null;
        this.isVisible = false;
        this.uploadOptions = uploadOptions;
        this.pluginContainer = pluginContainer;
        this.addTransactionDispatcher = addTransactionDispatcher;
        this.uploadContainer = document.createElement("div");
        this.uploadContainer.className =
            "mt6 bt bb bc-black-400 d-none js-image-uploader";
        this.uploadField = document.createElement("input");
        this.uploadField.type = "file";
        this.uploadField.className = "d-none";
        this.uploadField.accept = "image/*";
        this.uploadField.multiple = false;
        this.uploadField.id = "fileUpload" + (Math.random() * 10000).toFixed(0);
        this.uploadContainer.innerHTML = escapeHTML(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n            <div class=\"fs-body2 p12 pb0\"><label class=\"s-link\" for=\"", "\">Browse</label>, drag & drop, or paste an image <span class=\"fc-light fs-caption\">Max size 2 MiB</span></div>\n\n            <div class=\"js-image-preview wmx100 pt12 px12 d-none\"></div>\n            <aside class=\"s-notice s-notice__warning d-none m8 js-validation-message\" role=\"status\" aria-hidden=\"true\"></aside>\n\n            <div class=\"d-flex ai-center p12\">\n                <button class=\"s-btn s-btn__primary ws-nowrap mr8 js-add-image\" type=\"button\" disabled>Add image</button>\n                <button class=\"s-btn ws-nowrap js-cancel-button\" type=\"button\">Cancel</button>\n                <div class=\"ml64 d-flex fd-column fs-caption fc-black-300 s-anchors s-anchors__muted\">\n                    <div class=\"js-branding-html\"></div>\n                    <div class=\"js-content-policy-html\"></div>\n                </div>\n            </div>\n        "], ["\n            <div class=\"fs-body2 p12 pb0\"><label class=\"s-link\" for=\"", "\">Browse</label>, drag & drop, or paste an image <span class=\"fc-light fs-caption\">Max size 2 MiB</span></div>\n\n            <div class=\"js-image-preview wmx100 pt12 px12 d-none\"></div>\n            <aside class=\"s-notice s-notice__warning d-none m8 js-validation-message\" role=\"status\" aria-hidden=\"true\"></aside>\n\n            <div class=\"d-flex ai-center p12\">\n                <button class=\"s-btn s-btn__primary ws-nowrap mr8 js-add-image\" type=\"button\" disabled>Add image</button>\n                <button class=\"s-btn ws-nowrap js-cancel-button\" type=\"button\">Cancel</button>\n                <div class=\"ml64 d-flex fd-column fs-caption fc-black-300 s-anchors s-anchors__muted\">\n                    <div class=\"js-branding-html\"></div>\n                    <div class=\"js-content-policy-html\"></div>\n                </div>\n            </div>\n        "])), this.uploadField.id);
        // add in the uploadField right after the first child element
        this.uploadContainer.children[0].after(this.uploadField);
        // XSS "safe": this html is passed in via the editor options; it is not our job to sanitize it
        // eslint-disable-next-line no-unsanitized/property
        this.uploadContainer.querySelector(".js-branding-html").innerHTML =
            (_a = this.uploadOptions) === null || _a === void 0 ? void 0 : _a.brandingHtml;
        // XSS "safe": this html is passed in via the editor options; it is not our job to sanitize it
        // eslint-disable-next-line no-unsanitized/property
        this.uploadContainer.querySelector(".js-content-policy-html").innerHTML = (_b = this.uploadOptions) === null || _b === void 0 ? void 0 : _b.contentPolicyHtml;
        this.uploadField.addEventListener("change", function () {
            _this.handleFileSelection(view);
        });
        // add the upload container to the menu area
        pluginContainer.appendChild(this.uploadContainer);
        this.uploadContainer.addEventListener("dragenter", this.highlightDropArea.bind(this));
        this.uploadContainer.addEventListener("dragover", this.highlightDropArea.bind(this));
        // we need this handler on top of the plugin's handleDrop() to make
        // sure we're handling drop events on the upload container itself properly
        this.uploadContainer.addEventListener("drop", function (event) {
            _this.unhighlightDropArea(event);
            _this.handleDrop(event, view);
        });
        // we need this handler on top of the plugin's handlePaste() to make
        // sure we're handling paste events on the upload container itself properly
        this.uploadContainer.addEventListener("paste", function (event) {
            _this.handlePaste(event, view);
        });
        this.uploadContainer.addEventListener("dragleave", this.unhighlightDropArea.bind(this));
        // TODO should likely be attached to the document (or better yet, handled via EditorProps.handleKeyDown)
        view.dom.parentNode.addEventListener("keydown", function (event) {
            if (event.key === "Escape") {
                hideImageUploader(view);
            }
        });
        this.uploadContainer
            .querySelector(".js-cancel-button")
            .addEventListener("click", function () { return hideImageUploader(view); });
        this.uploadContainer
            .querySelector(".js-add-image")
            .addEventListener("click", function (e) {
            return _this.handleUploadTrigger(e, _this.image, view);
        });
    }
    ImageUploader.prototype.highlightDropArea = function (event) {
        this.uploadContainer.classList.add("bs-ring");
        this.uploadContainer.classList.add("bc-blue-300");
        event.preventDefault();
        event.stopPropagation();
    };
    ImageUploader.prototype.unhighlightDropArea = function (event) {
        this.uploadContainer.classList.remove("bs-ring");
        this.uploadContainer.classList.remove("bc-blue-300");
        event.preventDefault();
        event.stopPropagation();
    };
    ImageUploader.prototype.handleFileSelection = function (view) {
        this.resetImagePreview();
        var files = this.uploadField.files;
        if (view.state.selection.$from.parent.inlineContent && files.length) {
            void this.showImagePreview(files[0]);
        }
    };
    ImageUploader.prototype.handleDrop = function (event, view) {
        this.resetImagePreview();
        var files = event.dataTransfer.files;
        if (view.state.selection.$from.parent.inlineContent && files.length) {
            void this.showImagePreview(files[0]);
        }
    };
    ImageUploader.prototype.handlePaste = function (event, view) {
        this.resetImagePreview();
        var files = event.clipboardData.files;
        if (view.state.selection.$from.parent.inlineContent && files.length) {
            void this.showImagePreview(files[0]);
        }
    };
    ImageUploader.prototype.validateImage = function (image) {
        var validTypes = ["image/jpeg", "image/png", "image/gif"];
        var sizeLimit = 0x200000; // 2 MiB
        if (validTypes.indexOf(image.type) === -1) {
            return ValidationResult.InvalidFileType;
        }
        if (image.size >= sizeLimit) {
            return ValidationResult.FileTooLarge;
        }
        return ValidationResult.Ok;
    };
    ImageUploader.prototype.showValidationError = function (errorMessage, level) {
        if (level === void 0) { level = "warning"; }
        this.uploadField.value = null;
        var validationElement = this.uploadContainer.querySelector(".js-validation-message");
        if (level === "warning") {
            validationElement.classList.remove("s-notice__danger");
            validationElement.classList.add("s-notice__warning");
        }
        else {
            validationElement.classList.remove("s-notice__warning");
            validationElement.classList.add("s-notice__danger");
        }
        validationElement.classList.remove("d-none");
        validationElement.textContent = errorMessage;
    };
    ImageUploader.prototype.hideValidationError = function () {
        var validationElement = this.uploadContainer.querySelector(".js-validation-message");
        validationElement.classList.add("d-none");
        validationElement.classList.remove("s-notice__warning");
        validationElement.classList.remove("s-notice__danger");
        validationElement.innerHTML = "";
    };
    ImageUploader.prototype.showImagePreview = function (file) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            return _this.showImagePreviewAsync(file, resolve, reject);
        });
        return promise;
    };
    ImageUploader.prototype.showImagePreviewAsync = function (file, resolve, reject) {
        var _this = this;
        var previewElement = this.uploadContainer.querySelector(".js-image-preview");
        var addImageButton = this.uploadContainer.querySelector(".js-add-image");
        this.hideValidationError();
        var validationResult = this.validateImage(file);
        switch (validationResult) {
            case ValidationResult.FileTooLarge:
                this.showValidationError("Your image is too large to upload (over 2 MiB)");
                reject("file too large");
                return;
            case ValidationResult.InvalidFileType:
                this.showValidationError("Please select an image (jpeg, png, gif) to upload");
                reject("invalid filetype");
                return;
        }
        this.resetImagePreview();
        var reader = new FileReader();
        reader.addEventListener("load", function () {
            var image = new Image();
            image.className = "hmx1 w-auto";
            image.title = file.name;
            image.src = reader.result;
            previewElement.appendChild(image);
            previewElement.classList.remove("d-none");
            _this.image = file;
            addImageButton.disabled = false;
            resolve();
        }, false);
        reader.readAsDataURL(file);
    };
    ImageUploader.prototype.resetImagePreview = function () {
        this.uploadContainer.querySelector(".js-image-preview").innerHTML = "";
        this.image = null;
        this.uploadContainer.querySelector(".js-add-image").disabled = true;
    };
    ImageUploader.prototype.resetUploader = function () {
        this.resetImagePreview();
        this.hideValidationError();
        this.uploadField.value = null;
    };
    ImageUploader.prototype.handleUploadTrigger = function (event, file, view) {
        if (!file) {
            return;
        }
        void this.startImageUpload(view, file);
        this.resetUploader();
        hideImageUploader(view);
        view.focus();
    };
    ImageUploader.prototype.startImageUpload = function (view, file) {
        var _this = this;
        var _a;
        // A fresh object to act as the ID for this upload
        var id = {};
        // Replace the selection with a placeholder
        var tr = view.state.tr;
        if (!tr.selection.empty)
            tr.deleteSelection();
        IMAGE_UPLOADER_KEY.setMeta(tr, {
            add: { id: id, pos: tr.selection.from },
            // explicitly clear out any pasted/dropped file on upload
            file: null,
            visible: false,
        });
        view.dispatch(tr);
        if (!((_a = this.uploadOptions) === null || _a === void 0 ? void 0 : _a.handler)) {
            // purposefully log an error to the dev console
            // don't use our internal `log` implementation, it only logs on dev builds
            // eslint-disable-next-line no-console
            console.error("No upload handler registered. Ensure you set a proper handler on the editor's options.imageUploadHandler");
            return;
        }
        return this.uploadOptions.handler(file).then(function (url) {
            // find where we inserted our placeholder so the content insert knows where to go
            var decos = IMAGE_UPLOADER_KEY.getState(view.state).decorations;
            var found = decos.find(null, null, function (spec) { return spec.id == id; });
            var pos = found.length ? found[0].from : null;
            // If the content around the placeholder has been deleted, drop the image
            if (pos === null)
                return;
            // get the transaction from the dispatcher
            var tr = _this.addTransactionDispatcher(view.state, url, pos);
            // let the plugin know it can remove the upload decoration
            tr = IMAGE_UPLOADER_KEY.setMeta(tr, {
                remove: { id: id },
                visible: false,
                file: null,
            });
            view.dispatch(tr);
        }, function () {
            // let the plugin know it can remove the upload decoration
            view.dispatch(IMAGE_UPLOADER_KEY.setMeta(view.state.tr, {
                remove: { id: id },
                visible: false,
                file: null,
            }));
            // reshow the image uploader along with an error message
            showImageUploader(view);
            _this.showValidationError("Image upload failed. Please try again.", "error");
        });
    };
    ImageUploader.prototype.update = function (view) {
        var state = IMAGE_UPLOADER_KEY.getState(view.state);
        var isVisible = state === null || state === void 0 ? void 0 : state.visible;
        if (typeof isVisible !== "boolean") {
            isVisible = false;
        }
        // states already match, nothing to do
        if (isVisible === this.isVisible) {
            return;
        }
        this.isVisible = isVisible;
        this.image = (state === null || state === void 0 ? void 0 : state.file) || this.image;
        if (this.isVisible) {
            this.uploadContainer.classList.remove("d-none");
            this.uploadContainer.querySelector("button").focus();
            if (this.image) {
                void this.showImagePreview(this.image);
            }
        }
        else {
            this.resetUploader();
            this.uploadContainer.classList.add("d-none");
            this.uploadContainer.classList.remove("outline-ring");
        }
    };
    ImageUploader.prototype.destroy = function () {
        this.uploadField.remove();
        this.uploadContainer.remove();
        this.image = null;
    };
    return ImageUploader;
}());
export { ImageUploader };
export function hideImageUploader(view) {
    var state = IMAGE_UPLOADER_KEY.getState(view.state);
    // already hidden, don't dispatch the event
    if (!state || !state.visible) {
        return;
    }
    var tr = view.state.tr;
    IMAGE_UPLOADER_KEY.setMeta(tr, {
        visible: false,
        // explicitly clear out any pasted/dropped file on hide
        file: null,
    });
    var newState = view.state.apply(tr);
    view.updateState(newState);
}
export function showImageUploader(view, file) {
    var state = IMAGE_UPLOADER_KEY.getState(view.state);
    // already visible, don't dispatch the event
    if (!state || state.visible) {
        return;
    }
    var tr = view.state.tr;
    IMAGE_UPLOADER_KEY.setMeta(tr, {
        visible: true,
        // explicitly clear the file if one wasn't passed (essentially resetting the preview)
        file: file || null,
    });
    var newState = view.state.apply(tr);
    view.updateState(newState);
}
/** Checks if the image-upload functionality is enabled */
export function imageUploaderEnabled(view) {
    var state = IMAGE_UPLOADER_KEY.getState(view.state);
    return !!state;
}
/**
 * Creates a placeholder decoration to indicate to the user that the image is currently uploading;
 * Gets replaced with the actual image markup on upload completion
 */
function createPlaceholder() {
    var placeholder = document.createElement("div");
    placeholder.className = "ws-normal d-block m8";
    placeholder.innerHTML = "\n<div class=\"py6 px6 bg-black-050 bar-sm gsx gs8 d-inline-flex ai-center fw-normal fs-body1\">\n    <span class=\"s-spinner s-spinner__sm flex--item\">\n        <span class=\"v-visible-sr\">Loading\u2026</span>\n    </span>\n    <span class=\"flex--item\">Uploading image\u2026</span>\n</div>\n";
    return placeholder;
}
/**
 * Adds image uploading capabilities to the editor.
 * With this plugin, you'll be able to show a popover that allows you to
 * browse for files on your file system, or use drag & drop to select images
 * to upload.
 *
 * On upload, this plugin will call the provided uploadHandler function .
 * @see defaultImageUploadHandler for an example
 *
 * @param uploadHandler A function handling file uploads. Will receive the file to upload
 * as the `file` parameter and needs to return a resolved promise with the URL of the uploaded file
 * @param containerFn A function that returns the container to insert the plugin's UI into
 * @param addTransactionDispatcher Dispatcher function that generates a transaction to dispatch to the view on image add
 */
function imageUploaderPlaceholderPlugin(uploadOptions, containerFn, addTransactionDispatcher) {
    // if the required image upload options are missing, don't enable the plugin at all
    if (!(uploadOptions === null || uploadOptions === void 0 ? void 0 : uploadOptions.handler)) {
        return new Plugin({});
    }
    return new StatefulPlugin({
        key: IMAGE_UPLOADER_KEY,
        state: {
            init: function () {
                return {
                    visible: false,
                    decorations: DecorationSet.empty,
                    file: null,
                };
            },
            apply: function (tr, state) {
                var set = state.decorations || DecorationSet.empty;
                // Adjust decoration positions to changes made by the transaction
                set = set.map(tr.mapping, tr.doc);
                var metadata = this.getMeta(tr);
                var returnValue = {
                    visible: state.visible,
                    file: state.file,
                    decorations: set,
                };
                // if no metadata was set, do not alter this state further
                if (!metadata) {
                    return returnValue;
                }
                // if the "visible" flag was set, use it
                if ("visible" in metadata) {
                    returnValue.visible = metadata.visible;
                }
                if ("file" in metadata) {
                    returnValue.file = metadata.file;
                }
                else {
                    returnValue.file = null;
                }
                // See if the transaction adds or removes any placeholders
                if (metadata.add) {
                    var deco = Decoration.widget(metadata.add.pos, createPlaceholder(), {
                        id: metadata.add.id,
                    });
                    returnValue.decorations = set.add(tr.doc, [deco]);
                }
                else if (metadata.remove) {
                    returnValue.decorations = set.remove(set.find(null, null, function (spec) { return spec.id == metadata.remove.id; }));
                }
                return returnValue;
            },
        },
        props: {
            decorations: function (state) {
                return this.getState(state).decorations;
            },
            handleClick: function (view) {
                hideImageUploader(view);
                return false;
            },
            handleDrop: function (view, event) {
                var files = event.dataTransfer.files;
                if (view.state.selection.$from.parent.inlineContent &&
                    files.length) {
                    showImageUploader(view, files[0]);
                    return true;
                }
                return false;
            },
            handlePaste: function (view, event) {
                var files = event.clipboardData.files;
                if (view.state.selection.$from.parent.inlineContent &&
                    files.length) {
                    hideImageUploader(view); // always hide + show in case it's already open
                    showImageUploader(view, files[0]);
                    return true;
                }
                return false;
            },
        },
        view: function (editorView) {
            // TODO centralize! done in menu.ts too
            containerFn =
                containerFn ||
                    function (view) {
                        return view.dom.parentElement;
                    };
            return new ImageUploader(editorView, uploadOptions, containerFn(editorView), addTransactionDispatcher);
        },
    });
}
/** The plugin key the image uploader plugin is tied to */
var IMAGE_UPLOADER_KEY = new StatefulPluginKey(ImageUploader.name);
/**
 * Adds image uploading capabilities to the editor.
 * With this plugin, you'll be able to show a popover that allows you to
 * browse for files on your file system, or use drag & drop to select images
 * to upload.
 *
 * On upload, this plugin will call the provided uploadOptions.handler function
 * @see defaultImageUploadHandler for an example
 *
 * @param uploadOptions The imageUpload options
 * @param containerFn A function that returns the container to insert the plugin's UI into
 */
export function richTextImageUpload(uploadOptions, containerFn) {
    return imageUploaderPlaceholderPlugin(uploadOptions, containerFn, function (state, url, pos) {
        var marks = uploadOptions.wrapImagesInLinks
            ? [richTextSchema.marks.link.create({ href: url })]
            : null;
        var imgNode = richTextSchema.nodes.image.create({ src: url }, null, marks);
        return state.tr.replaceWith(pos, pos, imgNode);
    });
}
//TODO markdown upload decoration doesn't really fit in visually, make it more... ascii art-ish?
/**
 * Adds image uploading capabilities to the editor.
 * With this plugin, you'll be able to show a popover that allows you to
 * browse for files on your file system, or use drag & drop to select images
 * to upload.
 *
 * On upload, this plugin will call the provided uploadOptions.handler function
 * @see defaultImageUploadHandler for an example
 *
 * @param uploadHandler The imageUpload options
 * @param containerFn A function that returns the container to insert the plugin's UI into
 */
export function commonmarkImageUpload(uploadOptions, containerFn) {
    return imageUploaderPlaceholderPlugin(uploadOptions, containerFn, function (state, url, pos) {
        // construct the raw markdown
        var defaultAltText = "enter image description here";
        var mdString = "![" + defaultAltText + "](" + url + ")";
        var selectionStart = pos + 2;
        var selectionEnd = selectionStart + defaultAltText.length;
        if (uploadOptions.wrapImagesInLinks) {
            mdString = "[" + mdString + "](" + url + ")";
            selectionStart += 1;
            selectionEnd += 1;
        }
        // insert into the document
        var tr = state.tr.insertText(mdString, pos);
        // pre-select the alt text so the user can just start typing after insert
        // NOTE: these are not magic numbers, just hardcoded indexes for the above string
        tr.setSelection(TextSelection.create(state.apply(tr).doc, selectionStart, selectionEnd));
        return tr;
    });
}
var templateObject_1;
