import { Plugin, PluginSpec, PluginKey, Transaction, StateField, EditorState } from "prosemirror-state";
import { Schema } from "prosemirror-model";
import { EditorView } from "prosemirror-view";
/**
 * Extended StateField that overrides the `this` of all methods to be `StatefulPlugin` instead of just `Plugin`
 */
interface StatefulPluginStateField<T, TThis extends StatefulPlugin<T> = StatefulPlugin<T>> extends StateField<T, Schema> {
    /** @inheritdoc */
    init(this: TThis, config: {
        [key: string]: unknown;
    }, instance: EditorState<Schema>): T;
    /** @inheritdoc */
    apply(this: TThis, tr: Transaction<Schema>, value: T, oldState: EditorState<Schema>, newState: EditorState<Schema>): T;
    /** @inheritdoc */
    toJSON?: (this: TThis, value: T) => unknown;
    /** @inheritdoc */
    fromJSON?: (this: TThis, config: {
        [key: string]: unknown;
    }, value: unknown, state: EditorState<Schema>) => T;
}
export interface StatefulPluginSpec<T, TThis extends StatefulPlugin<T> = StatefulPlugin<T>> extends PluginSpec<T, Schema> {
    /** @inheritdoc */
    key: StatefulPluginKey<T>;
    /** @inheritdoc */
    state: StatefulPluginStateField<T, TThis> | null;
}
export declare class StatefulPluginKey<T> extends PluginKey<T, Schema> {
    constructor(name?: string);
    /** @inheritdoc */
    get(state: EditorState<Schema>): StatefulPlugin<T> | null | undefined;
    setMeta(tr: Transaction, data: T): Transaction;
}
export declare class StatefulPlugin<T> extends Plugin<T, Schema> {
    spec: StatefulPluginSpec<T>;
    constructor(spec: StatefulPluginSpec<T>);
    get transactionKey(): StatefulPluginKey<T>;
    getMeta(tr: Transaction): T;
}
export declare class AsyncPluginKey<T, TCallback> extends StatefulPluginKey<T> {
    constructor(name?: string);
    /** @inheritdoc */
    setMeta(tr: Transaction, data: T): Transaction;
    setCallbackData(tr: Transaction, data: TCallback): Transaction;
}
export interface AsyncPluginSpec<T, TCallback> extends StatefulPluginSpec<T, AsyncPlugin<T, TCallback>> {
    key: AsyncPluginKey<T, TCallback>;
    asyncCallback: (view: EditorView, prevState: EditorState) => Promise<TCallback>;
}
/**
 * Shortcut wrapper for a plugin with async functionality;
 * Overrides the spec's `view` property to manually handle async functionality
 */
export declare class AsyncPlugin<T, TCallback> extends StatefulPlugin<T> {
    constructor(spec: AsyncPluginSpec<T, TCallback>);
    /** @inheritdoc */
    getMeta(tr: Transaction): T;
    getCallbackData(tr: Transaction): TCallback;
}
export {};
