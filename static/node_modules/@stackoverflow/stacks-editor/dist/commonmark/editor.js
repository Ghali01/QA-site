var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { baseKeymap } from "prosemirror-commands";
import { history } from "prosemirror-history";
import { keymap } from "prosemirror-keymap";
import { EditorState } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
import { CodeBlockHighlightPlugin } from "../shared/highlighting/highlight-plugin";
import { log } from "../shared/logger";
import { commonmarkImageUpload, defaultImageUploadHandler, } from "../shared/prosemirror-plugins/image-upload";
import { editableCheck, readonlyPlugin, } from "../shared/prosemirror-plugins/readonly";
import { CodeStringParser, commonmarkSchema } from "../shared/schema";
import { deepMerge } from "../shared/utils";
import { BaseView, defaultParserFeatures, } from "../shared/view";
import { createMenu } from "./commands";
import { commonmarkKeymap } from "./key-bindings";
var CommonmarkEditor = /** @class */ (function (_super) {
    __extends(CommonmarkEditor, _super);
    function CommonmarkEditor(target, content, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.options = deepMerge(CommonmarkEditor.defaultOptions, options);
        _this.editorView = new EditorView(function (node) {
            var _a;
            (_a = node.classList).add.apply(_a, _this.options.classList);
            target.appendChild(node);
        }, {
            editable: editableCheck,
            state: EditorState.create({
                doc: _this.parseContent(content),
                plugins: [
                    history(),
                    commonmarkKeymap,
                    keymap(baseKeymap),
                    createMenu(_this.options),
                    CodeBlockHighlightPlugin(null),
                    commonmarkImageUpload(_this.options.imageUpload, _this.options.pluginParentContainer),
                    readonlyPlugin(),
                ],
            }),
        });
        log("prosemirror commonmark document", _this.editorView.state.doc.toJSON());
        return _this;
    }
    Object.defineProperty(CommonmarkEditor, "defaultOptions", {
        get: function () {
            return {
                // set to null to disable by default
                editorHelpLink: null,
                menuParentContainer: null,
                parserFeatures: defaultParserFeatures,
                imageUpload: {
                    handler: defaultImageUploadHandler,
                },
            };
        },
        enumerable: false,
        configurable: true
    });
    CommonmarkEditor.prototype.parseContent = function (content) {
        return CodeStringParser.fromSchema(commonmarkSchema).parseCode(content);
    };
    CommonmarkEditor.prototype.serializeContent = function () {
        return CodeStringParser.toString(this.editorView.state.doc);
    };
    return CommonmarkEditor;
}(BaseView));
export { CommonmarkEditor };
