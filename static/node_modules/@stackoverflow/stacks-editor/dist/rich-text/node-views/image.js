var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import { escapeHTML } from "../../shared/utils";
// keep track of all images so we can assign unique IDs for stacks popovers
var imageId = 0;
var ImageView = /** @class */ (function () {
    function ImageView(node, view, getPos) {
        var _this = this;
        this.id = imageId++;
        this.img = this.createImage(node);
        this.form = this.createForm();
        this.form.addEventListener("submit", function (event) {
            return _this.handleChangedImageAttributes(event, getPos, view);
        });
        this.popover = this.createPopover();
        this.dom = document.createElement("div");
        this.dom.appendChild(this.img);
        this.dom.appendChild(this.popover);
        this.dom.addEventListener("s-popover:hide", function (event) {
            return _this.preventClose(event);
        });
    }
    /**
     * We want to trigger Stacks' showing and hiding of popovers whenever an image is considered
     * "selected" by prosemirror. This can happen by mouse-clicking or arrowing through the editor
     */
    ImageView.prototype.selectNode = function () {
        this.img.classList.add("bs-ring");
        this.selectionActive = true;
        // tell Stacks to hide the popover
        this.img.dispatchEvent(new Event("image-popover-show"));
        var inputFields = this.form.querySelectorAll("input");
        if (inputFields.length > 0) {
            inputFields[0].focus({
                preventScroll: true,
            });
        }
    };
    ImageView.prototype.deselectNode = function () {
        this.img.classList.remove("bs-ring");
        this.selectionActive = false;
        // tell Stacks to hide the popover
        this.img.dispatchEvent(new Event("image-popover-hide"));
    };
    ImageView.prototype.stopEvent = function (event) {
        // prevent elements from within the tooltip to bubble up to the outer editor
        // as this would make the editor view close the tooltip view right away
        return this.popover.contains(event.target);
    };
    ImageView.prototype.ignoreMutation = function () {
        return true;
    };
    ImageView.prototype.destroy = function () {
        this.img.remove();
        this.popover.remove();
        this.dom = null;
        this.form.remove();
    };
    ImageView.prototype.createImage = function (node) {
        var img = document.createElement("img");
        img.setAttribute("aria-controls", "img-popover-" + this.id);
        img.setAttribute("data-controller", "s-popover");
        img.setAttribute("data-action", "image-popover-show->s-popover#show image-popover-hide->s-popover#hide");
        img.src = node.attrs.src;
        if (node.attrs.alt)
            img.alt = node.attrs.alt;
        if (node.attrs.title)
            img.title = node.attrs.title;
        return img;
    };
    ImageView.prototype.createForm = function () {
        var form = document.createElement("form");
        form.className = "d-flex fd-column";
        form.innerHTML = escapeHTML(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n            <label class=\"flex--item s-label mb4\" for=\"img-src-", "\">Image source</label>\n            <div class=\"d-flex ps-relative mb12\">\n                <input class=\"flex--item s-input\" type=\"text\" name=\"src\" id=\"img-src-", "\" value=\"", "\" placeholder=\"https://example.com/image.png\"/>\n            </div>\n            <label class=\"flex--item s-label mb4\" for=\"img-alt-", "\">Image description</label>\n            <div class=\"d-flex ps-relative mb12\">\n                <input class=\"flex--item s-input\" type=\"text\" name=\"alt\" id=\"img-alt-", "\" value=\"", "\" placeholder=\"A description for the image\"/>\n            </div>\n            <label class=\"flex--item s-label mb4\" for=\"img-title-", "\">Title</label>\n            <div class=\"d-flex ps-relative mb12\">\n                <input class=\"flex--item s-input\" type=\"text\" name=\"title\" id=\"img-title-", "\" value=\"", "\" placeholder=\"A title shown on hover\"/>\n            </div>\n\n            <button class=\"s-btn s-btn__primary\" type=\"submit\" aria-pressed=\"false\">Apply</button>\n        "], ["\n            <label class=\"flex--item s-label mb4\" for=\"img-src-", "\">Image source</label>\n            <div class=\"d-flex ps-relative mb12\">\n                <input class=\"flex--item s-input\" type=\"text\" name=\"src\" id=\"img-src-", "\" value=\"", "\" placeholder=\"https://example.com/image.png\"/>\n            </div>\n            <label class=\"flex--item s-label mb4\" for=\"img-alt-", "\">Image description</label>\n            <div class=\"d-flex ps-relative mb12\">\n                <input class=\"flex--item s-input\" type=\"text\" name=\"alt\" id=\"img-alt-", "\" value=\"", "\" placeholder=\"A description for the image\"/>\n            </div>\n            <label class=\"flex--item s-label mb4\" for=\"img-title-", "\">Title</label>\n            <div class=\"d-flex ps-relative mb12\">\n                <input class=\"flex--item s-input\" type=\"text\" name=\"title\" id=\"img-title-", "\" value=\"", "\" placeholder=\"A title shown on hover\"/>\n            </div>\n\n            <button class=\"s-btn s-btn__primary\" type=\"submit\" aria-pressed=\"false\">Apply</button>\n        "])), this.id, this.id, this.img.src, this.id, this.id, this.img.alt, this.id, this.id, this.img.title);
        return form;
    };
    ImageView.prototype.createPopover = function () {
        var popover = document.createElement("div");
        popover.className = "s-popover ws-normal wb-normal js-img-popover";
        popover.id = "img-popover-" + this.id;
        // TODO added `ws-normal` to fix FF only bug. Will file bug against Stacks and revisit
        popover.innerHTML = "<div class=\"s-popover--arrow ws-normal\"></div>";
        popover.append(this.form);
        return popover;
    };
    ImageView.prototype.handleChangedImageAttributes = function (event, getPos, view) {
        var _this = this;
        event.preventDefault();
        if (typeof getPos !== "function")
            return;
        var findInput = function (selector) {
            return _this.form.querySelector(selector);
        };
        var src = findInput("#img-src-" + this.id);
        var alt = findInput("#img-alt-" + this.id);
        var title = findInput("#img-title-" + this.id);
        view.dispatch(view.state.tr.setNodeMarkup(getPos(), null, {
            src: src.value,
            alt: alt.value,
            title: title.value,
        }));
        view.focus();
    };
    // don't let Stacks close the popover if the image
    // element is still selected in the editor
    ImageView.prototype.preventClose = function (event) {
        if (this.selectionActive) {
            event.preventDefault();
        }
    };
    return ImageView;
}());
export { ImageView };
var templateObject_1;
