import { Schema } from "prosemirror-model";
import { EditorState, Transaction } from "prosemirror-state";
import { DecorationSet } from "prosemirror-view";
import { StatefulPlugin, StatefulPluginKey } from "../../shared/prosemirror-plugins/plugin-extensions";
declare class LinkTooltip {
    private content;
    private href;
    private removeListener;
    private applyListener;
    editing: boolean;
    private get editButton();
    private get applyButton();
    private get removeButton();
    private get link();
    private get input();
    private get inputWrapper();
    constructor(state: EditorState<Schema>);
    /**
     * Binds both a mousedown and selective keydown listener to replace the purposefully missing "click" event
     * @param element The element to bind the events to
     * @param callback The callback to run on mousedown/keydown
     */
    private bindElementInteraction;
    /**
     * Updates the internal state / tooltip visuals based on the current editor state
     * @param state the current state of the editor
     */
    private update;
    /**
     * Gets the tooltip decoration from a new PluginState.apply call
     * @param tr The transaction that was applied (to map existing decorations)
     * @param value The existing LinkTooltipState (with forceHidden potentially set)
     * @param oldState The state before the transaction
     * @param newState The state after the transaction
     */
    getDecorations(tr: Transaction, value: LinkTooltipState, oldState: EditorState, newState: EditorState): DecorationSet;
    /**
     * Returns true if the focus event caused something in the content to be focused
     * @param e The dispatched focus event
     */
    hasFocus(e: FocusEvent): boolean;
    /**
     * Find out if the current selection contains a link mark
     * @param state The current editor state
     */
    private isLink;
    /**
     * Shows the input for href editing and focuses it
     * @param url
     */
    private showEditMode;
    /**
     * Hides the href focus input and changes back to view mode
     */
    private hideEditMode;
    /** Marks the input with a visual validation error */
    private showValidationError;
    /** Clears the input of any visual validation errors */
    private hideValidationError;
    /**
     * Expand the current selection to contain the entire link mark.
     * This allows us to remove the link mark from the entire link in the document
     * if the user didn't explicitly select a region to be toggled.
     */
    private expandSelection;
    /**
     * Gets the positions immediately before and after a link mark in the current selection
     * @param state
     */
    private linkAround;
    /**
     * Finds all marks in the current selection
     * @param state The current editor state
     */
    private findMarksInSelection;
    /**
     * Updates apply/delete button events with the current editor view
     * @param view The current editor view
     */
    private updateEventListeners;
}
/** Represents the link tooltip plugin's state */
declare type LinkTooltipState = {
    forceHide?: boolean;
    editing?: boolean;
    linkTooltip: LinkTooltip;
    decorations: DecorationSet;
};
/**
 * Custom PluginKey with additional methods for interacting with a LinkTooltip
 */
declare class LinkTooltipPluginKey extends StatefulPluginKey<LinkTooltipState> {
    constructor();
    /**
     * Launch the link tooltip in edit mode
     */
    setEditMode(isEditing: boolean, state: EditorState, tr: Transaction): Transaction;
    /**
     * Force the link tooltip to hide - useful e.g. when the entire editor is losing
     * focus and we want to make sure the tooltip disappears, too
     */
    forceHide(state: EditorState, dispatch: (tr: Transaction) => void): void;
}
export declare const LINK_TOOLTIP_KEY: LinkTooltipPluginKey;
/**
 * A plugin view that shows a tooltip when selecting a link in rich-text mode.
 * The tooltip shows the href attribute of the selected link and allows removing
 * the link mark from the document.
 *
 * Note: This is not a _NodeView_ because when dealing with links, we're dealing with
 * _marks_, not _nodes_.
 */
export declare const linkTooltipPlugin: StatefulPlugin<LinkTooltipState>;
export {};
